--- src/internal/atomic.h
+++ src/internal/atomic.h
@@ -1,6 +1,12 @@
 #ifndef _ATOMIC_H
 #define _ATOMIC_H
 
+#ifdef __CloudABI__
+
+#define a_clz_64 __builtin_clz
+
+#else
+
 #include <stdint.h>
 
 #include "atomic_arch.h"
@@ -316,3 +322,5 @@ static inline int a_clz_64(uint64_t x)
 #endif
 
 #endif
+
+#endif
--- /dev/null
+++ src/internal/endian.h
@@ -0,0 +1,10 @@
+#ifndef ENDIAN_H
+#define ENDIAN_H
+
+#include <features.h>
+
+#define __BYTE_ORDER __BYTE_ORDER__
+#define __LITTLE_ENDIAN __ORDER_LITTLE_ENDIAN__
+#define __BIG_ENDIAN __ORDER_BIG_ENDIAN__
+
+#endif
--- /dev/null
+++ src/internal/features.h
@@ -0,0 +1,7 @@
+#ifndef FEATURES_H
+#define FEATURES_H
+
+#define hidden
+#define weak_alias(a, b)
+
+#endif
--- src/internal/libc.h
+++ src/internal/libc.h
@@ -1,6 +1,12 @@
 #ifndef LIBC_H
 #define LIBC_H
 
+#ifdef __CloudABI__
+
+#include <features.h>
+
+#else
+
 #include <stdlib.h>
 #include <stdio.h>
 #include <limits.h>
@@ -70,3 +76,5 @@ extern char **__environ;
 #define LFS64(x) LFS64_2(x, x##64)
 
 #endif
+
+#endif
--- src/internal/libm.h
+++ src/internal/libm.h
@@ -13,6 +13,12 @@
 #ifndef _LIBM_H
 #define _LIBM_H
 
+#ifdef __CloudABI__
+#define __lgammaf_r lgammaf_r
+#define __lgamma_r lgamma_r
+#define __lgammal_r lgammal_r
+#endif
+
 #include <stdint.h>
 #include <float.h>
 #include <math.h>
--- src/math/lgammal.c
+++ src/math/lgammal.c
@@ -350,6 +350,8 @@ long double __lgammal_r(long double x, int *sg)
 }
 #endif
 
+#ifndef __CloudABI__
+
 extern int __signgam;
 
 long double lgammal(long double x)
@@ -357,4 +359,6 @@ long double lgammal(long double x)
 	return __lgammal_r(x, &__signgam);
 }
 
+#endif
+
 weak_alias(__lgammal_r, lgammal_r);
--- src/math/remainder.c
+++ src/math/remainder.c
@@ -7,4 +7,6 @@ double remainder(double x, double y)
 	return remquo(x, y, &q);
 }
 
+#ifndef __CloudABI__
 weak_alias(remainder, drem);
+#endif
--- src/math/remainderf.c
+++ src/math/remainderf.c
@@ -7,4 +7,6 @@ float remainderf(float x, float y)
 	return remquof(x, y, &q);
 }
 
+#ifndef __CloudABI__
 weak_alias(remainderf, dremf);
+#endif
