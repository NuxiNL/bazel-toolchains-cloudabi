filegroup(
    name = "libcxx_headers",
    srcs = glob(
        include = ["include/**"],
        exclude = ["include/support/**"],
    ),
    visibility = ["//visibility:public"],
)

cc_library(
    name = "libcxx",
    srcs = [
        "src/algorithm.cpp",
        "src/any.cpp",
        "src/bind.cpp",
        "src/charconv.cpp",
        "src/chrono.cpp",
        "src/condition_variable.cpp",
        "src/debug.cpp",
        "src/exception.cpp",
        "src/experimental/memory_resource.cpp",
        "src/functional.cpp",
        "src/future.cpp",
        "src/hash.cpp",
        "src/include/apple_availability.h",
        "src/include/atomic_support.h",
        "src/include/config_elast.h",
        "src/include/refstring.h",
        "src/ios.cpp",
        "src/iostream.cpp",
        "src/locale.cpp",
        "src/memory.cpp",
        "src/mutex.cpp",
        "src/new.cpp",
        "src/optional.cpp",
        "src/random.cpp",
        "src/regex.cpp",
        "src/shared_mutex.cpp",
        "src/stdexcept.cpp",
        "src/string.cpp",
        "src/strstream.cpp",
        "src/support/solaris/xlocale.cpp",
        "src/system_error.cpp",
        "src/thread.cpp",
        "src/typeinfo.cpp",
        "src/utility.cpp",
        "src/valarray.cpp",
        "src/variant.cpp",
        "src/vector.cpp",
    ],
    defines = [
        "_LIBCPP_BUILD_STATIC",
        "_LIBCPP_BUILDING_LIBRARY=1",
        "LIBCXX_BUILDING_LIBCXXABI",
    ],
    strip_include_prefix = "src",
    textual_hdrs = [
        "src/support/runtime/exception_libcxxabi.ipp",
        "src/support/runtime/exception_pointer_cxxabi.ipp",
    ],
    visibility = ["//visibility:public"],
    deps = ["@org_llvm_libcxxabi//:libcxxabi"],
)
